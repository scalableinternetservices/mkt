# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User
  post(postId: Int!): Post
  posts: [Post!]!
}

type Mutation {
}

type Subscription {
}

type Post {
  id: Int!
  title: String!
  description: String!
  totalCommitted: Int!
  owner: User!
  commits: [PostCommit!]!
}

type User {
  id: Int!
  email: String!
  name: String!
  posts: [Post!]!
  commits: [PostCommit!]!
  userType: UserType!
  merchant: String!
  category: String!
}

type PostCommit {
  id: Int!
  amount: Int!
  post: Post!
  user: User!
}

enum UserType {
  ADMIN
  USER
}
