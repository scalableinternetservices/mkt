# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User
  post(postId: Int!): Post
  posts(num: Int!, skip: Int!, sortOptions: SortOptions, filterOptions: UserFilterOptions): [Post!]!
  numPosts: Int!
}

type Mutation {
  createPost(input: CreatePostInput!): Post
  commit(input: CommitInput!): Boolean!
  comment(input: CommentInput!): Boolean!
}

input UserFilterOptions {
  userId: Int!
}

input SortOptions {
  field: String!
  ascending: Boolean!
}

input CreatePostInput {
  title: String!
  picture: String
  description: String!
  goal: Int!
  ownerId: Int!
  merchant: String!
  category: Category
}

input CommitInput {
  amount: Int!
  itemUrl: String!
  postId: Int!
  userId: Int!
}

input CommentInput {
  body: String!
  postId: Int!
  userId: Int!
}

type Post {
  id: Int!
  picture: String
  title: String!
  description: String!
  goal: Int!
  ownerId: Int!
  owner: User!
  commits: [PostCommit!]!
  comments: [Comment!]!
  category: Category!
  merchant: String!
}

type User {
  id: Int!
  picture: String
  email: String!
  name: String!
  posts: [Post!]!
  commits: [PostCommit!]!
  userType: UserType!
}

type PostCommit {
  id: Int!
  amount: Int!
  itemUrl: String!
  postId: Int!
  post: Post!
  userId: Int!
  user: User!
}

type Comment {
  id: Int!
  body: String!
  postId: Int!
  post: Post!
  userId: Int!
  user: User!
}

enum UserType {
  ADMIN
  USER
}

enum Category {
  CLOTHING
  GROCERIES
  FOOD
  HOUSEWARES
  ALCOHOL
}
